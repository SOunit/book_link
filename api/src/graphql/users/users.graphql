type Query {
  getUsersByItems(itemIds: [String!]!, userId: String!): [User!]!
  user(id: ID!): User!
  getUserCount(id: ID!): Int!
  getFollowingUsers(targetUserId: ID!, loginUserId: ID!): [FollowingUser!]!
  getFollowerUsers(targetUserId: ID!, loginUserId: ID!): [FollowingUser!]!
  following(userId: ID!, followingUserId: ID!): Following
  getUserChat(userIds: [ID!]!): Chat
  getUserChatList(userId: ID!): [Chat]
  itemsByTitle(title: String): [Item!]!
  fetchRandomItems: [Item!]!
  item(id: ID!): Item!
}

type Mutation {
  createItem(data: CreateItemInput!): Item!
  createUser(id: ID!): User!
  updateUser(data: UpdateUserInput!): User!
  deleteUserItem(data: DeleteUserItemInput!): User!
  addUserItem(data: AddUserItemInput!): User!
  createFollowing(userId: ID!, followingUserId: ID!): Boolean
  deleteFollowing(userId: ID!, followingUserId: ID!): Boolean
  createFollower(userId: ID!, followerUserId: ID!): Boolean
  deleteFollower(userId: ID!, followerUserId: ID!): Boolean
  createChat(userId: ID!, targetId: ID!): Chat
  createMessage(chatId: ID!, userId: ID!, text: String!): Message
}

scalar Date

schema {
  query: Query
  mutation: Mutation
}

input AddUserItemInput {
  userId: ID!
  itemId: ID!
}

input DeleteUserItemInput {
  userId: ID!
  itemId: ID!
}

input UpdateUserInput {
  id: ID!
  name: String!
  imageUrl: String!
  about: String!
}

input CreateItemInput {
  title: String!
  author: String!
  imageUrl: String
}

type User {
  id: ID!
  name: String!
  about: String
  imageUrl: String
  items: [Item]
  chats: [Chat]
}

type FollowingUser {
  id: ID
  name: String
  imageUrl: String
  isFollowing: Boolean
}

type Following {
  userId: ID
  followingUserId: ID
}

type Follower {
  userId: ID
  followerUserId: ID
}

type Chat {
  id: ID
  users: [User]
  messages: [Message]
}

type Message {
  id: ID
  chatId: ID
  userId: ID
  text: String
  createdAt: Date
}
