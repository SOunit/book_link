type Query {
  user(id: ID!): User!
  getUsersByItems(itemIds: [String!]!, userId: String!): [User!]!
  getUserCount(id: ID!): Int!
  getUserChat(userIds: [ID!]!): Chat
  getUserChatList(userId: ID!): [Chat]
  fetchRandomItems: [Item!]!
}

type Mutation {
  createUser(id: ID!): User!
  updateUser(data: UpdateUserInput!): User!
  createChat(userId: ID!, targetId: ID!): Chat
  createMessage(chatId: ID!, userId: ID!, text: String!): Message
}

scalar Date

schema {
  query: Query
  mutation: Mutation
}

input UpdateUserInput {
  id: ID!
  name: String!
  imageUrl: String!
  about: String!
}

input CreateItemInput {
  title: String!
  author: String!
  imageUrl: String
}

type User {
  id: ID!
  name: String!
  about: String
  imageUrl: String
  items: [Item]
  chats: [Chat]
}

type Chat {
  id: ID
  users: [User]
  messages: [Message]
}

type Message {
  id: ID
  chatId: ID
  userId: ID
  text: String
  createdAt: Date
}
